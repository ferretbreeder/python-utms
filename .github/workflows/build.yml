# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python executable creation

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build-windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pyinstaller beautifulsoup4
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build executable
      run: |
        pyinstaller --onefile link_editor.py --name utm-link-editor-windows-amd64
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: utm-link-editor-windows-amd64.exe
        path: dist/utm-link-editor-windows-amd64.exe

  build-linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pyinstaller beautifulsoup4
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build executable
      run: |
        pyinstaller --onefile link_editor.py --name utm-link-editor-linux-amd64
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: utm-link-editor-linux-amd64
        path: dist/utm-link-editor-linux-amd64

  create-release:

    runs-on: ubuntu-latest

    needs: [build-windows, build-linux]
    
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v2.0.0
        release_name: Release v2.0.0
        body: |
          ## Changelog
          - New major version due to new UTM query string format/parameter ordering
            - New parameter ordering is "?utm_source=&utm_medium=&utm_campaign=&utm_content="
          - Linux executable is now created as part of the CI/CD process
          - Saving a file is now automatic. The file is "overwritten" with the changed URLs rather than prompting the user to select the file to save to.
          - A few minor UI changes
        draft: false
        prerelease: false
    - name: Download artifacts
      uses: actions/download-artifact@v4
      # with:
        # run-id: ${{ github.event.workflow_run.id }}
        # github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: List files
      run: ls -R
    - name: Get Tag Name
      id: get_tag_name
      run: |
        tag_name="${{ github.ref }}"
        tag_name="${tag_name#refs/tags/}"
        echo "TAG_NAME=${tag_name}" >> $GITHUB_ENV
    - name: Upload Windows Release Asset
      id: upload-windows-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: utm-link-editor-windows-amd64.exe/utm-link-editor-windows-amd64.exe
        asset_name: utm-link-editor-windows-amd64-${{ env.TAG_NAME }}.exe
        asset_content_type: application/zip
    - name: Upload Linux Release Asset
      id: upload-linux-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: utm-link-editor-linux-amd64/utm-link-editor-linux-amd64
        asset_name: utm-link-editor-linux-amd64-${{ env.TAG_NAME }}
        asset_content_type: application/zip
